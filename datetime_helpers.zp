(define datetime:MINYEAR 1)
(define datetime:MAXYEAR 9999)
(define datetime:_MAXORDINAL 3652059)
(define datetime:_DAYS_IN_MONTH [-1 31 28 31 30 31 30 31 31 30 31 30 31])
(define datetime:_DAYS_BEFORE_MONTH
      (map 
        (lambda (x) 
          (let ((el (+ 1 (list-sum (list-ref datetime:_DAYS_IN_MONTH 0 x)))))
            (if (= 1 el) -1 el)))
        (range 0 13)))

(define datetime:_MONTHNAMES ["" "Jan" "Feb" "Mar" "Apr" "May" "Jun" "Jul" "Aug" "Sep" "Oct" "Nov" "Dec"])
(define datetime:_DAYNAMES ["" "Mon" "Tue" "Wed" "Thu" "Fri" "Sat" "Sun"])

(define (datetime:_is_leap year) "checks whether year is a leap year"
    (and (= 0 (mod year 4)) (or (/= 0 (mod year 100)) (= 0 (mod year 400)))))

(define (datetime:_days_before_year year) "returns number of days before first day of year"
    (let ((y (- year 1)))
      (- (+ (* y 365) (/ y 4) (/ y 400)) (/ y 100))))

(define (datetime:_days_in_month year month) "returns number of days in month in year"
    (if (and (= month 2) (datetime:_is_leap year))
      29
      (list-ref datetime:_DAYS_IN_MONTH month)))

(define (datetime:_days_before_month year month) "number of days in year preceding first day of month"
    (if (and (> month 2) (datetime:_is_leap year))
      (+ (list-ref datetime:_DAYS_BEFORE_MONTH month) 1)
      (list-ref datetime:_DAYS_BEFORE_MONTH month)))

(define (datetime:_ymd2ord year month day) "ordinal, considering 01-Jan-0001 as day 1"
    (let ((dim (datetime:_days_in_month year month)))
      (+ (datetime:_days_before_year year)
         (datetime:_days_before_month year month)
         day)))

(define datetime:_DI400Y (datetime:_days_before_year 401))
(define datetime:_DI100Y (datetime:_days_before_year 101))
(define datetime:_DI4Y (datetime:_days_before_year 5))

(define (datetime:_ord2ymd n) "'(year month day), considering 01-Jan-0001 as day 1."
    (let* ((n (- n 1))
           (tmp (divmod n datetime:_DI400Y))
           (n400 (car tmp))
           (n (cadr tmp))
           (year (+ (* n400 400) 1))
           (tmp (divmod n datetime:_DI100Y))
           (n100 (car tmp))
           (n (cadr tmp))
           (tmp (divmod n datetime:_DI4Y))
           (n4 (car tmp))
           (n (cadr tmp))
           (tmp (divmod n 365))
           (n1 (car tmp))
           (n (cadr tmp))
           (year (+ year (* n100 100) (* n4 4) n1)))
           (if (or (= n1 4) (= n100 4))
            (list (- year 1) 12 31)
            (let* ((month (>> (+ n 50) 5))
                   (prec (+ (list-ref datetime:_DAYS_BEFORE_MONTH month)
                            (if (and (> month 2) (datetime:_is_leap year)) 1 0))))
              (if (> prec n)
                (let* ((month (- month 1))
                       (prec (- prec (+ (list-ref datetime:_DAYS_IN_MONTH month)
                                        (if (and (> month 2) (datetime:_is_leap year)) 1 0)))))
                  (list year month (+ (- n prec) 1)))
                (list year month (+ (- n prec) 1)))))))
